CATEGORIES OF WINDOW FUNCTIONS
	AGGREGATE FUNCTIONS - avg,sum, count, min ,max, etc
	RANKING FUNCTIONS - rank, dense_rank, row_number 
	ANALYTICS FUNCTIONS - lead, lag, first_value,last_value
	
OVER
	Defines the partitioning and ordering of rows (i.e window) for the above functions to operate on.
	These functions are called window functions
	Over clause accepts the following 3 agruments to define a window for these functions to operate on
	ORDER BY
		Defines the loical order of the rows 
	PARTITION BY 
		Divides the query results into partitions.The window function is applied to each partition seperately
	ROWS AND RANGE
		Further limits the rows within the partition by specifying start and end points within the partition
		
	Note:
		The defaultj for ROWS or RANGE clause is 
		RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROWS
	
	UNBOUNDED PRECEDING
		Starts at the starting of a partion
	UNBOUNDED FOLLOWING 
		Ends at the end of the partion
	CURRENT ROW
		Rows for which the average is computed
		
	create table employee(employee_id integer,department_id integer,boss_id integer,name varchar(50),salary integer);
  
	  insert into employee values(1,1,2,'John Smith',20000);
	  insert into employee values(2,5,4,'Ava Muffinson',10000);
	  insert into employee values(3,2,5,'Cailin Ninson',30000);
	  insert into employee values(4,2,5,'Mike Peterson',20000);
	  insert into employee values(5,2,1,'Ian Peterson',80000);
	  insert into employee values(6,3,null,'John Mills',50000);	
	  
		+-------------+---------------+---------+---------------+--------+
		| employee_id | department_id | boss_id | name          | salary |
		+-------------+---------------+---------+---------------+--------+
		|           1 |             1 |       2 | John Smith    |  20000 |
		|           2 |             5 |       4 | Ava Muffinson |  10000 |
		|           3 |             2 |       5 | Cailin Ninson |  30000 |
		|           4 |             2 |       5 | Mike Peterson |  20000 |
		|           5 |             2 |       1 | Ian Peterson  |  80000 |
		|           6 |             3 |    NULL | John Mills    |  50000 |
		+-------------+---------------+---------+---------------+--------+
	  
	THIS IS THE EXAMPLE FOR ROLLING AVERAGE 
	1) USE AGGREGATE FUNCTIONS ON ALL THE DATASET	
		select avg(salary) from employee;
	    +-------------+
		| avg(salary) |
		+-------------+
		|  35000.0000 |
		+-------------+
		
	2) USE OVER AND ORDER BY WITH ( DEFAULT FOR ROWS OR RANGE CLAUSE)
		RANGE BETWEEN UNBOUNDED PRECENDING AND CURRENT ROW. 
		Note:* UNBOUDED PRECEDING IS THE LAST ROW IN THE TABLE
		     * Average is calculated based on the current row and the preceding row till the end of the table
			 * Order by clause is imposed on the rows that is salary
			 * In the result below what we can see that cnt is same(2nd row and 3rd row) as the salary is same for 2nd and 3rd row. 
			 select   employee_id
				  , department_id 
				  , salary
				  , avg(salary) OVER (order by salary) average  
				  , count(salary) OVER (order by salary) cnt 
				  , sum(salary) OVER (order by salary) total 
				   from employee;
				+-------------+---------------+--------+------------+-----+--------+
				| employee_id | department_id | salary | average    | cnt | total  |
				+-------------+---------------+--------+------------+-----+--------+
				|           2 |             5 |  10000 | 10000.0000 |   1 |  10000 |
				|           1 |             1 |  20000 | 16666.6667 |   3 |  50000 |
				|           4 |             2 |  20000 | 16666.6667 |   3 |  50000 |
				|           3 |             2 |  30000 | 20000.0000 |   4 |  80000 |
				|           6 |             3 |  50000 | 26000.0000 |   5 | 130000 |
				|           5 |             2 |  80000 | 35000.0000 |   6 | 210000 |
				+-------------+---------------+--------+------------+-----+--------+
	3) 	USE OVER AND ORDER BY WITH ( ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)
		Note: This filter is not useful unless you use partition clause.
	    select   employee_id
          , department_id 
          , salary
          , avg(salary) OVER (order by salary ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) average  
          , count(salary) OVER (order by salary ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) cnt 
          , sum(salary) OVER (order by salary ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) total 
           from employee;
		+-------------+---------------+--------+------------+-----+--------+
		| employee_id | department_id | salary | average    | cnt | total  |
		+-------------+---------------+--------+------------+-----+--------+
		|           2 |             5 |  10000 | 35000.0000 |   6 | 210000 |
		|           1 |             1 |  20000 | 35000.0000 |   6 | 210000 |
		|           4 |             2 |  20000 | 35000.0000 |   6 | 210000 |
		|           3 |             2 |  30000 | 35000.0000 |   6 | 210000 |
		|           6 |             3 |  50000 | 35000.0000 |   6 | 210000 |
		|           5 |             2 |  80000 | 35000.0000 |   6 | 210000 |
		+-------------+---------------+--------+------------+-----+--------+
	4) USE OVER AND ORDER BY AND PARTITION BY WITH ( ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) 
		Note: This filter is not useful unless you use partition clause.
		aggregate function is applied based on the partition.
		
	    select   employee_id
        , department_id 
        , salary
        , avg(salary) OVER (partition by department_id order by salary ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) average  
        , count(salary) OVER (partition by department_id order by salary ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) cnt 
        , sum(salary) OVER (partition by department_id order by salary ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) total 
         from employee;
		
		+-------------+---------------+--------+------------+-----+--------+
		| employee_id | department_id | salary | average    | cnt | total  |
		+-------------+---------------+--------+------------+-----+--------+
		|           1 |             1 |  20000 | 20000.0000 |   1 |  20000 |
		|           4 |             2 |  20000 | 43333.3333 |   3 | 130000 |
		|           3 |             2 |  30000 | 43333.3333 |   3 | 130000 |
		|           5 |             2 |  80000 | 43333.3333 |   3 | 130000 |
		|           6 |             3 |  50000 | 50000.0000 |   1 |  50000 |
		|           2 |             5 |  10000 | 10000.0000 |   1 |  10000 |
		+-------------+---------------+--------+------------+-----+--------+
	5) 	USE OVER AND ORDER BY  ( ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) 
	    Note:This would take values from the previous row and the next row.
		
		select   employee_id
        , department_id 
        , salary
        , avg(salary) OVER (order by salary ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) average  
        , count(salary) OVER (order by salary ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) cnt 
        , sum(salary) OVER ( order by salary ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) total 
         from employee;
		+-------------+---------------+--------+------------+-----+--------+
		| employee_id | department_id | salary | average    | cnt | total  |
		+-------------+---------------+--------+------------+-----+--------+
		|           2 |             5 |  10000 | 15000.0000 |   2 |  30000 |
		|           1 |             1 |  20000 | 16666.6667 |   3 |  50000 |
		|           4 |             2 |  20000 | 23333.3333 |   3 |  70000 |
		|           3 |             2 |  30000 | 33333.3333 |   3 | 100000 |
		|           6 |             3 |  50000 | 53333.3333 |   3 | 160000 |
		|           5 |             2 |  80000 | 65000.0000 |   2 | 130000 |
		+-------------+---------------+--------+------------+-----+--------+
		
	5) 	USE OVER AND ORDER BY WITH  ( RANGE BETWEEN 1 PRECEDING AND 1 FOLLOWING) (RANGE)
       	Note:we are using range instead of rows.range clause treats same value as duplicates
		
		select   employee_id
			, department_id 
			, salary
			, avg(salary) OVER (order by salary RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) average  
			, count(salary) OVER (order by salary RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) cnt 
			, sum(salary) OVER ( order by salary RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) total 
			 from employee;
			 
		+-------------+---------------+--------+------------+-----+--------+
		| employee_id | department_id | salary | average    | cnt | total  |
		+-------------+---------------+--------+------------+-----+--------+
		|           2 |             5 |  10000 | 10000.0000 |   1 |  10000 |
		|           1 |             1 |  20000 | 16666.6667 |   3 |  50000 |
		|           4 |             2 |  20000 | 16666.6667 |   3 |  50000 |
		|           3 |             2 |  30000 | 20000.0000 |   4 |  80000 |
		|           6 |             3 |  50000 | 26000.0000 |   5 | 130000 |
		|           5 |             2 |  80000 | 35000.0000 |   6 | 210000 |
		+-------------+---------------+--------+------------+-----+--------+
		
		
