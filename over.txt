OVER CLAUSE:
	Specifies how to partition query rows into groups for processing by the window function
	1) If over clause is empty it treats the entire set of query rows as single partition.This would produce a global sum, but does so for each row
	2) If over is specified with partition rows it would treat it would partition by that column.
	3) windowing execution occurs before ORDER BY, LIMIT, and SELECT DISTINCT
	4) Any of the window function can be used. COUNT(),AVG(),MIN(),MAX(),ROW_NUMBER(),RANK(),DENSE_RANK()
		
	Ex:
	SELECT
         year, country, product, profit,
         SUM(profit) OVER() AS total_profit,
         SUM(profit) OVER(PARTITION BY country) AS country_profit
       FROM sales
       ORDER BY country, year, product, profit;
		+------+---------+------------+--------+--------------+----------------+
		| year | country | product    | profit | total_profit | country_profit |
		+------+---------+------------+--------+--------------+----------------+
		| 2000 | Finland | Computer   |   1500 |         7535 |           1610 |
		| 2000 | Finland | Phone      |    100 |         7535 |           1610 |
		| 2001 | Finland | Phone      |     10 |         7535 |           1610 |
		| 2000 | India   | Calculator |     75 |         7535 |           1350 |
		| 2000 | India   | Calculator |     75 |         7535 |           1350 |
		| 2000 | India   | Computer   |   1200 |         7535 |           1350 |
		| 2000 | USA     | Calculator |     75 |         7535 |           4575 |
		| 2000 | USA     | Computer   |   1500 |         7535 |           4575 |
		| 2001 | USA     | Calculator |     50 |         7535 |           4575 |
		| 2001 | USA     | Computer   |   1200 |         7535 |           4575 |
		| 2001 | USA     | Computer   |   1500 |         7535 |           4575 |
		| 2001 | USA     | TV         |    100 |         7535 |           4575 |
		| 2001 | USA     | TV         |    150 |         7535 |           4575 |
		+------+---------+------------+--------+--------------+----------------+
	
    select grade_level
      from
      (select grade_level 
        , count(student_id)  cnt
        , max(count(student_id)) over() max_cnt 
        from 
        student
        group by grade_level)
        a 
    where a.cnt=a.max_cnt;
	
	EX 2 WITH SAMPLE DATA
			create table employee
		  (
			id int,
			name varchar(50),
			salary int,
			department_id int
		  );

		  insert into employee values
		  (1,'Joe',70000,1),
		  (2,'Henry',80000,2),
		  (3,'Sam',60000,2),
		  (4,'Max',90000,1),
		  (5,'Janet',69000,1),
		  (6,'Randy',85000,1);
    
	
	select name
       ,  min(salary) over() min_salary
       from employee;
       
		+-------+------------+
		| name  | min_salary |
		+-------+------------+
		| Joe   |      60000 |
		| Henry |      60000 |
		| Sam   |      60000 |
		| Max   |      60000 |
		| Janet |      60000 |
		| Randy |      60000 |
		+-------+------------+