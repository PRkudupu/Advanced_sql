QUESTION
	Calculate each user's average session time. 
	A session is defined as the time difference between a page_load and page_exit. 
	For simplicity, assume a user has only 1 session per day and if there are multiple of the same events on that day, 
	consider only the latest page_load and earliest page_exit. Output the user_id and their average session time.

TABLE
	facebook_web_log
	user_id:int64
	timestamp:Datetime64[ns]
	action:object

SCRIPTS
	create table facebook_web_log(user_id int, timestamp timestamp , action varchar(50));
	insert into facebook_web_log values(0,'2019/04/25 13:30:15','page_load');
	insert into facebook_web_log values(0,'2019/04/25 13:30:18','page_load');
	insert into facebook_web_log values(0,'2019/04/25 13:30:40','scroll_down');
	insert into facebook_web_log values(0,'2019/04/25 13:30:45','scroll_up');
	insert into facebook_web_log values(0,'2019/04/25 13:31:10','scroll_down');
	insert into facebook_web_log values(0,'2019/04/25 13:31:25','scroll_down');
	insert into facebook_web_log values(0,'2019/04/25 13:31:40','page_exit');
	insert into facebook_web_log values(1,'2019/04/25 13:40:00','page_load');
	insert into facebook_web_log values(1,'2019/04/25 13:40:10','scroll_down');
	insert into facebook_web_log values(1,'2019/04/25 13:40:15','scroll_down');
	insert into facebook_web_log values(1,'2019/04/25 13:40:20','scroll_down');
	insert into facebook_web_log values(1,'2019/04/25 13:40:25','scroll_down');
	insert into facebook_web_log values(1,'2019/04/25 13:40:30','scroll_down');
	insert into facebook_web_log values(1,'2019/04/25 13:40:35','page_exit');
	insert into facebook_web_log values(2,'2019/04/25 13:41:21','page_load');
	insert into facebook_web_log values(2,'2019/04/25 13:41:30','scroll_down');
	insert into facebook_web_log values(2,'2019/04/25 13:41:35','scroll_down');
	insert into facebook_web_log values(2,'2019/04/25 13:41:40','scroll_up');
	insert into facebook_web_log values(1,'2019/04/26 11:15:00','page_load');
	insert into facebook_web_log values(1,'2019/04/26 11:15:10','scroll_down');
	insert into facebook_web_log values(1,'2019/04/26 11:15:20','scroll_down');
	insert into facebook_web_log values(1,'2019/04/26 11:15:25','scroll_up');
	insert into facebook_web_log values(1,'2019/04/26 11:15:35','page_exit');
	insert into facebook_web_log values(0,'2019/04/28 14:30:15','page_load');
	insert into facebook_web_log values(0,'2019/04/28 14:30:10','page_load');
	insert into facebook_web_log values(0,'2019/04/28 13:30:40','scroll_down');
	insert into facebook_web_log values(0,'2019/04/28 15:31:40','page_exit');

DATA 
	user_id	timestamp			action
	0		2019-04-25 13:30:15	page_load
	0		2019-04-25 13:30:18	page_load
	0		2019-04-25 13:30:40	scroll_down
	0		2019-04-25 13:30:45	scroll_up
	0		2019-04-25 13:31:10	scroll_down
	0		2019-04-25 13:31:25	scroll_down
	0		2019-04-25 13:31:40	page_exit
	1		2019-04-25 13:40:00	page_load
	1		2019-04-25 13:40:10	scroll_down
	1		2019-04-25 13:40:15	scroll_down
	1		2019-04-25 13:40:20	scroll_down
	1		2019-04-25 13:40:25	scroll_down
	1		2019-04-25 13:40:30	scroll_down
	1		2019-04-25 13:40:35	page_exit
	2		2019-04-25 13:41:21	page_load
	2		2019-04-25 13:41:30	scroll_down
	2		2019-04-25 13:41:35	scroll_down
	2		2019-04-25 13:41:40	scroll_up
	1		2019-04-26 11:15:00	page_load
	1		2019-04-26 11:15:10	scroll_down
	1		2019-04-26 11:15:20	scroll_down
	1		2019-04-26 11:15:25	scroll_up
	1		2019-04-26 11:15:35	page_exit
	0		2019-04-28 14:30:15	page_load
	0		2019-04-28 14:30:10	page_load
	0		2019-04-28 13:30:40	scroll_down
	0		2019-04-28 15:31:40	page_exit

EXPECTED OUTPUT
   user_id	avg
	0	1883.5
	1	35
	
ASSUMPTIONS 
1)session : page_load - page_exit
2)users has only 1 session , more than 1 than get the latest page_load(max) earliest min (exit)

create to 
1)self join to eliminate the rows which has both action 'page_load' and page_exit'
2) page_exit time should be greater than load
3) find the the difference betwen page_load and page_exit
sub queries one finding the min page_exit per day for each user
4) find the average

QUERY
WITH all_session AS
(
  SELECT t1.user_id
    ,  t1.timestamp::date as date
    ,  min(t2.timestamp::TIMESTAMP)- max(t1.timestamp::TIMESTAMP) session_duration
    FROM facebook_web_log t1
    JOIN facebook_web_log t2 
    ON  t1.user_id =t2.user_id 
    WHERE t1.action='page_load' and t2.action='page_exit'
         and t2.timestamp > t1.timestamp
    GROUP BY 1,2
)
SELECT user_id 
      , extract(epoch from (avg(session_duration)))
      FROM all_session
      GROUP BY user_id;
	
	 
	
 


