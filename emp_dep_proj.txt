EMPLOYEE DEPARTMENTS  PROJECTS and EMPLOYEE PROJECTS

		employees                             projects
		+---------------+---------+           +---------------+---------+
		| id            | int     |<----+  +->| id            | int     |
		| first_name    | varchar |     |  |  | title         | varchar |
		| last_name     | varchar |     |  |  | start_date    | date    |
		| salary        | int     |     |  |  | end_date      | date    |
		| department_id | int     |--+  |  |  | budget        | int     |
		+---------------+---------+  |  |  |  +---------------+---------+
									 |  |  |
		departments                  |  |  |  employees_projects
		+---------------+---------+  |  |  |  +---------------+---------+
		| id            | int     |<-+  |  +--| project_id    | int     |
		| name          | varchar |     +-----| employee_id   | int     |
		+---------------+---------+           +---------------+---------+
		
	EMPLOYEES
	+----+------------+-----------+--------+---------------+
	| id | first_name | last_name | salary | department_id |
	+----+------------+-----------+--------+---------------+
	|  1 | John       | Smith     |  20000 |             1 |
	|  2 | Ava        | Muffinson |  10000 |             5 |
	|  3 | Cailin     | Ninson    |  30000 |             2 |
	|  4 | Mike       | Peterson  |  20000 |             2 |
	|  5 | Ian        | Peterson  |  80000 |             2 |
	|  6 | John       | Mills     |  50000 |             3 |
	+----+------------+-----------+--------+---------------+
	
	PROJECTS
	+----+--------------------------+------------+------------+---------+
	| id | title                    | start_date | end_date   | budget  |
	+----+--------------------------+------------+------------+---------+
	|  1 | Build a cool site        | 2011-10-28 | 2012-01-26 | 1000000 |
	|  2 | Update TPS Reports       | 2011-07-20 | 2011-10-28 |  100000 |
	|  3 | Design 3 New Silly Walks | 2009-05-11 | 2009-08-19 |     100 |
	+----+--------------------------+------------+------------+---------+
	
	DEPARTMENTS
	+----+-------------+
	| id | name        |
	+----+-------------+
	|  1 | Reporting   |
	|  2 | Engineering |
	|  3 | Marketing   |
	|  4 | Biz Dev     |
	|  5 | Silly Walks |
	+----+-------------+
	
	EMPLOYEE_PROJECTS
	+------------+-------------+
	| project_id | employee_id |
	+------------+-------------+
	|          2 |           1 |
	|          3 |           2 |
	|          1 |           3 |
	|          1 |           4 |
	|          1 |           5 |
	+------------+-------------+
	
	
	#SELECT EMPLOYEES FROM DEPARTMENT WHERE SALARY IS GREATER THAN 40K
 
	select concat(employees.first_name,' ',employees.last_name) as employee_name,names 
		from employees,departments 
		where employees.department_id=departments.id 
		group by employees.id,employees.salary 
		having employees.salary > 40000;

	#using join
	select e.id,concat(e.first_name," ",e.last_name) as employee_name, d.name,e.salary 
		from employees e 
		join departments d 
		on e.department_id = d.id 
		group by salary,e.id,employee_name,e.salary,d.name 
		having salary >40000;
		+----+---------------+-------------+--------+
		| id | employee_name | name        | salary |
		+----+---------------+-------------+--------+
		|  5 | Ian Peterson  | Engineering |  80000 |
		|  6 | John Mills    | Marketing   |  50000 |
		+----+---------------+-------------+--------+
	#simple query which displays only id
	select id 
		from employees 
		where salary > 40000;
		+----+
		| id |
		+----+
		|  5 |
		|  6 |
		+----+

#SELECT EMPLOYEES FROM DEPARTMENT WHERE SALARY IS 40K	
	select e.id,concat(e.first_name," ",e.last_name) as employee_name, d.name,e.salary 
		from employees e 
		join departments d 
		on e.department_id = d.id 
		group by salary,e.id,employee_name,e.salary,d.name 
		having salary = 40000;

#SELECT EMPLOYEES FROM DEPARTMENT WHERE SALARY IS 40K and less than 70000	
#using multiple group by condition
	select e.id,concat(e.first_name," ",e.last_name) as employee_name, d.name,e.salary 
		from employees e 
		join departments d 
		on e.department_id = d.id 
		group by salary,e.id,employee_name,e.salary,d.name 
		having salary >40000 and salary < 70000;
		+----+---------------+-----------+--------+
		| id | employee_name | name      | salary |
		+----+---------------+-----------+--------+
		|  6 | John Mills    | Marketing |  50000 |
		+----+---------------+-----------+--------+

#SELECT EMPLOYEES FROM DEPARTMENT WHERE SALARY IS 40K and less than 70000 (WITHOUT USING GROUP BY)
		select id, salary from employees 
			having salary > 40000 and salary < 70000;
		+----+--------+
		| id | salary |
		+----+--------+
		|  6 |  50000 |
		+----+--------+
# WE CANNOT GROUP BY AND THEN GET THE AGGREGATE FUNCTION
  In the example below we are using group by and trying to get the max of salary.
	As it is grouped by it would group all the salary
	select max(salary) from employees 
		group by salary 
		order by salary limit 1;
			+-------------+
			| max(salary) |
			+-------------+
			|       10000 |
			+-------------+

	Note : Here we are using group by with limit where we filter only one record
	select max(salary) from employees 
			group by salary order by salary limit 1;
		+-------------+
		| max(salary) |
		+-------------+
		|       10000 |
		+-------------+
	NOte: we do not have to use max we can just order by salary in descending order and then limit 1
	select id, salary
		from employees 
		order by salary desc
		limit 1;
    # SELECT EMPLOYEE WHO HAS MAX SALARY 
	select id,max(salary) 
		from employees 
		group by salary,id 
		order by salary 
		desc limit 1;
	
	#without using limit
	select id, salary 
		from employees 
		where salary in 
		(	select max(salary) from employees);
	
    #using dense_rnk
	select a.id
		,a.rnk
		,a.salary
		from
			(select id,salary, dense_rank() over (order by salary desc) as rnk from employees) a
		where rnk=1;
	
	#using CTE
	with result as (select id,first_name,salary, DENSE_RANK() 
			over (order by salary desc) as rnk  
			from employees)  
	select * from result where rnk=1;
			+----+------------+--------+-----+
			| id | first_name | salary | rnk |
			+----+------------+--------+-----+
			|  5 | Ian        |  80000 |   1 |
			+----+------------+--------+-----+
	
# SELECT THE SECOND HIGHEST SALARY
		#logic using less than
		select max(salary) 
			from employees 
				where salary < 
					(select max(salary) from employees);
			+-------------+
			| max(salary) |
			+-------------+
			|       50000 |
			+-------------+
		select id,max(salary) 
			from employees 
			where salary 
				not in (select max(salary) from employees) 
					group by id 
					order by salary desc 
					limit 1;
			+----+-------------+
			| id | max(salary) |
			+----+-------------+
			|  6 |       50000 |
			+----+-------------+
			
		with result as (select id,first_name,salary, DENSE_RANK() 
						over (order by salary desc) as rnk  
						from employees)  
						select * from result where rnk=2;
			+----+------------+--------+-----+
			| id | first_name | salary | rnk |
			+----+------------+--------+-----+
			|  6 | John       |  50000 |   2 |
			+----+------------+--------+-----+
		
	# second highest salary without using order by and limit
	select id,salary 
		from employees 
		where salary in 
			(select max(salary) 
				from employees 
					where salary not in 
						(select max(salary) 
							from employees));
			+----+--------+
			| id | salary |
			+----+--------+
			|  6 |  50000 |
			+----+--------+
	# Here we have multiple sub query trying to filter max salary to the outer query
	# Here we also create table based on queries
	select id,salary 
		from employees 
		where salary in (select max(t.salary) as max_salary 
							from (select max(salary) as salary 
										from employees 
										where salary not in(select max(salary) 
												from employees) group by id,salary)as t);
#SELECT TOP 3 EMPLOYEE SALARIES
		with cte as (select id,salary,dense_rank() over (order by salary desc) as rnk from employees) 
			select * from cte where rnk <=3;
		+----+--------+-----+
		| id | salary | rnk |
		+----+--------+-----+
		|  5 |  80000 |   1 |
		|  6 |  50000 |   2 |
		|  3 |  30000 |   3 |
		+----+--------+-----+


#SELECT TOP 3 EMPLOYEE SALARIES IN EACH DEPARTMENT
    # using dense_rank()
    with cte as (select id,department_id,
		salary,DENSE_RANK() over (partition by department_id order by salary desc) as rnk from employees) 
		select * from cte where rnk <=3;
		+----+--------+---------------+-----+
		| id | salary | department_id | rnk |
		+----+--------+---------------+-----+
		|  1 |  20000 |             1 |   1 |
		|  5 |  80000 |             2 |   1 |
		|  3 |  30000 |             2 |   2 |
		|  4 |  20000 |             2 |   3 |
		|  6 |  50000 |             3 |   1 |
		|  2 |  10000 |             5 |   1 |
		+----+--------+---------------+-----+

		# using row_number()
		with cte as (select id,salary,department_id, row_number() over (partition by department_id order by salary desc) as rnk from employees) 
			select * from cte where rnk=1;
	
		+----+--------+---------------+-----+
		| id | salary | department_id | rnk |
		+----+--------+---------------+-----+
		|  1 |  20000 |             1 |   1 |
		|  5 |  80000 |             2 |   1 |
		|  3 |  30000 |             2 |   2 |
		|  4 |  20000 |             2 |   3 |
		|  6 |  50000 |             3 |   1 |
		|  2 |  10000 |             5 |   1 |
		+----+--------+---------------+-----+

	
# SELECT EMPLOYEES ASSIGNED TO PROJECTS
	 select e.id,p.project_id from employees e left outer join employees_projects p 
	 	on e.id=p.employee_id 
		where p.project_id is not null;
		+----+------------+
		| id | project_id |
		+----+------------+
		|  1 |          2 |
		|  3 |          1 |
		|  4 |          1 |
		|  5 |          1 |
		|  2 |          3 |
		+----+------------+
# SELECT EMPLOYEES WHO ARE NOT ASSIGNED TO PROJECTS
		select e.id,p.project_id from employees e 
			left outer join employees_projects p on e.id=p.employee_id where p.project_id is null;
		+----+------------+
		| id | project_id |
		+----+------------+
		|  6 |       NULL |
		+----+------------+
     	
 
	
#EXPLANTION OF HOW THE GROUPING WORKS		
mysql> select max(salary) 
		from employees group by department_id;+-------------+
			| max(salary) |
			+-------------+
			|       20000 |
			|       80000 |
			|       50000 |
			|       10000 |
			+-------------+
mysql> select max(salary) from employees group by salary;
			+-------------+
			| max(salary) |
			+-------------+
			|       20000 |
			|       10000 |
			|       30000 |
			|       80000 |
			|       50000 |
			+-------------+
# SELECT MAX SALARY FOR EACH DEPARTMENT FOR EACH EMPLOYEE
		select t.department_id,e.id,e.salary 
			from employees e 
			join (select max(salary) as max_salary,department_id 
					from employees 
					group by department_id)as t 
						on e.salary=t.max_salary and e.department_id=t.department_id;
			+---------------+----+--------+
			| department_id | id | salary |
			+---------------+----+--------+
			|             1 |  1 |  20000 |
			|             5 |  2 |  10000 |
			|             2 |  5 |  80000 |
			|             3 |  6 |  50000 |
			+---------------+----+--------+
		
# CREATE A CTE table
		with 
			result 
				as (select id,first_name,salary, DENSE_RANK() 
						over (order by salary desc) as rnk  
						from employees
				    )
        select * from result;
		+----+------------+--------+-----+
		| id | first_name | salary | rnk |
		+----+------------+--------+-----+
		|  5 | Ian        |  80000 |   1 |
		|  6 | John       |  50000 |   2 |
		|  3 | Cailin     |  30000 |   3 |
		|  1 | John       |  20000 |   4 |
		|  4 | Mike       |  20000 |   4 |
		|  2 | Ava        |  10000 |   5 |
		+----+------------+--------+-----+

		
# SELECT EMPLOYEES WHO HAS NOT BEEN ASSIGNED PROJECTS
	select e.id, p.project_id from employees e
		left outer join employees_projects p
		on e.id=p.employee_id
		where p.employee_id is null;
	
		id | project_id 
		----+------------
		6 |    

# SELECT EMPLOYEES ASSIGNED TO PROJECTS
	select e.id, p.project_id from employees e
                  left outer join employees_projects p
                  on e.id=p.employee_id
                  where p.employee_id is not null;
	+----+
	| id |
	+----+
	|  1 |
	|  3 |
	|  4 |
	|  5 |
	|  2 |
	+----+	