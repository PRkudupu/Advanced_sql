Calculate the average comments for the users with >= 2 posts, and each post has comments greater or equal to 40
#DDL SCRIPTS
Comments I
name	posts	comments
u1	page1	90
u1	page2	50
u1	page3	40
u2	page2	55
u2	page4	45
u4	page4	30
u4	page3	40
u3	page2	100

CREATE TABLE comments (
    name            varchar(80),
    posts           varchar(80),
    comments         int
);

INSERT INTO comments VALUES ('u1', 'page1', '90');
INSERT INTO comments VALUES ('u1', 'page2', '50');
INSERT INTO comments VALUES ('u1', 'page3', '40');
INSERT INTO comments VALUES ('u2', 'page2', '55');
INSERT INTO comments VALUES ('u2', 'page4', '45');
INSERT INTO comments VALUES ('u4', 'page4', '30');
INSERT INTO comments VALUES ('u4', 'page3', '40');
INSERT INTO comments VALUES ('u3', 'page2', '100');


# CALCULATE THE AVERAGE COMMENTS FOR THE USERS WITH >= 2 POSTS, AND EACH POST HAS COMMENTS GREATER OR EAUAL TO 40
	# Using join
	select a.name, round(avg(a.comments),2) as avg_comment 
		from comments a 
		join (select name 
					from comments 
					where comments >=40 
					group by name having count(posts) >=2) b 
		on a.name=b.name group by a.name;
	+------+-------------+
	| name | avg_comment |
	+------+-------------+
	| u1   |       60.00 |
	| u2   |       50.00 |
	+------+-------------+

	#Without using join
	select name,
		avg(comments) as avg_count, 
		count(posts) as cnt_posts 
		from comments 
		where comments >= 40  
		group by name having count(posts) >=2;
	+------+-----------+-----------+
	| name | avg_count | cnt_posts |
	+------+-----------+-----------+
	| u1   |   60.0000 |         3 |
	| u2   |   50.0000 |         2 |
	+------+-----------+-----------+

#Comments II
  table: content_id | content_type (comment/ post) | target_id
  If it is comment，target_id is the userid who posts it.
  If it is post, then target_id is NULL.
 
	 CREATE TABLE contents(
		content_id int,
		content_type varchar(80),
		target_id varchar(80));

		INSERT INTO contents VALUES (1,'comment','u1');
		INSERT INTO contents VALUES (2,'post',NULL);
		INSERT INTO contents VALUES (3,'comment','u2');
		INSERT INTO contents VALUES (4,'post',NULL);
		INSERT INTO contents VALUES (5,'comment','u1');
		INSERT INTO contents VALUES (6,'comment','u1');
	    INSERT INTO contents VALUES (7,'comment','u3');
		INSERT INTO contents VALUES (8,'post',NULL);
		INSERT INTO contents VALUES (9,'video','u1');
	    INSERT INTO contents VALUES (10,'video','u3');
		INSERT INTO contents VALUES (11,'post',NULL);
		INSERT INTO contents VALUES (12,'photo','u1');
	    INSERT INTO contents VALUES (13,'photo','u3');
		INSERT INTO contents VALUES (14,'photo','u1');
	    INSERT INTO contents VALUES (15,'article','u3');
		
	
	table: content_id | content_type (comment/ post) | target_id
	If it is comment，target_id is the userid who posts it.
		If it is post, then target_id is NULL.
	#WHAT IS THE DISTRIBUTION OF COMMENTS?
	
	select a.cnt,count(a.cnt) as freq 
		from (select content_id, count(target_id) as cnt 
				from contents 
				where content_type='comment' 
				group by content_id) a 
				group by a.cnt;
		+-----+------+
		| cnt | freq |
		+-----+------+
		|   1 |    5 |
		+-----+------+
	
	#DISTRIBUTION LIST OF EACH CONTENT TYPE
	#Now what if content_type becomes {comment, video, photo, article}，what is the comment distribution for each content type?	
	select a.cnt,a.content_type,count(a.cnt) freq 
		from (select content_id,content_type,count(target_id) as cnt 
					from contents 
					group by content_id,content_type) a 
		group by a.cnt,a.content_type;
		+-----+--------------+------+
		| cnt | content_type | freq |
		+-----+--------------+------+
		|   1 | comment      |    5 |
		|   0 | post         |    4 |
		|   1 | video        |    2 |
		|   1 | photo        |    3 |
	    |   1 | article      |    1 |
	    +-----+--------------+------+
	#MESSAGES
	table: date | u1 | u2 | n_msg
	n_msg: the number of messsages between one unique user pair at someday.
	What can we get some insights from this table?
	user activities, represent closeness.
	Write a query about the distribution of number of conversations among users on someday. 
	Before we run any SQL, what is your gut sense that what the distribution will look like? Why?
	
	create table messages(
		date varchar(80),
		u1 varchar(80),
		u2 varchar(80),
		n_msg integer
	);
	
	insert into messages values ('10/01/2018','user1','user2',4);
	insert into messages values ('10/01/2018','user2','user1',4);
	insert into messages values ('10/01/2018','user1','user4',2);
	insert into messages values ('10/02/2018','user1','user2',2);
	insert into messages values ('10/02/2018','user2','user1',1);
	insert into messages values ('10/02/2018','user3','user4',10);
	insert into messages values ('10/02/2018','user3','user2',14);
	insert into messages values ('10/02/2018','user1','user2',14);
	insert into messages values ('10/03/2018','user4','user1',4);
	insert into messages values ('10/03/2018','user4','user5',25);
	
	1) GET ALL THE MESSAGES BY ALL USERS ON A PARTICULAR DAY
	select * 
		from messages 
		where date='10/02/2018';
		+------------+-------+-------+-------+
		| date       | u1    | u2    | n_msg |
		+------------+-------+-------+-------+
		| 10/02/2018 | user1 | user2 |     2 |
		| 10/02/2018 | user2 | user1 |     1 |
		| 10/02/2018 | user3 | user4 |    10 |
		| 10/02/2018 | user3 | user2 |    14 |
		| 10/02/2018 | user1 | user2 |    14 |
		+------------+-------+-------+-------+
	2) SELECT DISTINCT CONVERSATIONS BY ALL USERS ON A PARTICULAR DAY
	 select u1,count(distinct u2) conversations 
		from messages 
		where n_msg >0 and date ='10/02/2018' 
		group by u1;
		+-------+---------------+
		| u1    | conversations |
		+-------+---------------+
		| user1 |             1 |
		| user2 |             1 |
		| user3 |             2 |
		+-------+---------------+
	select u1,count(distinct(u2)) as conversations 
		from messages  
		where date ='10/02/2018' 
		group by u1;
		+-------+---------------+
		| u1    | conversations |
		+-------+---------------+
		| user1 |             1 |
		| user2 |             1 |
		| user3 |             2 |
		+-------+---------------+
	3) DISTRIBUTIONS OF CONVERSATIONS 
		select a.conversations,count(a.u1) freq 
			from (select u1,count(distinct u2) conversations 
					 from messages 
					 where n_msg >0 and date ='10/02/2018' 
					 group by u1) a 
			group by a.conversations 
			order by conversations;
		+---------------+------+
		| conversations | freq |
		+---------------+------+
		|             1 |    2 |
		|             2 |    1 |
		+---------------+------+
	 4) SUM OF ALL THE MESSAGES SENT BY A USER TO OTHER USERS
		select u1,u2, sum(n_msg) as sum_msg 
			from messages 
			group by u1,u2;
		+-------+-------+---------+
		| u1    | u2    | sum_msg |
		+-------+-------+---------+
		| user1 | user2 |      20 |
		| user2 | user1 |       5 |
		| user1 | user4 |       2 |
		| user3 | user4 |      10 |
		| user3 | user2 |      14 |
		| user4 | user1 |       4 |
		| user4 | user5 |      25 |
		+-------+-------+---------+
	5) TOP PARTNERS WHO SENDS THE MOST NUMBER OF MESSAGES TO EACH OTHER. 
	    select u1, max(sum_n_msg) sum_top 
			from (select u1, u2, sum(n_msg) sum_n_msg 
						from table1 
						group by u1, u2) tmp 
			group by u1
		+-------+-------------+
		| u1    | top_partner |
		+-------+-------------+
		| user1 |          20 |
		| user2 |           5 |
		| user3 |          14 |
		| user4 |          25 |
		+-------+-------------+	
	 6) Write a query that we can find the top partner who sends the most number 
	    of messages to each user. 
		And then add a outer query to calculate the following ratio:
	    FROM THE ABOVE QUERY CALCULATE THE FOLLOWING QUERY:
		sum(n_msg_with_top_partners) / sum(n_msg_with_all_contacts)
	    
		select sum(tmp.sum_top)/(select sum(n_msg) 
									from messages) as fraction 
			from (select a.u1,max(a.sum_msg) as sum_top 
						from (select u1,u2,sum(n_msg) as sum_msg 
								from messages 
								group by u1,u2 
								order by sum_msg desc) a 
								group by a.u1) 
					tmp;
		+----------+
		| fraction |
		+----------+
		|   0.8000 |
		+----------+
	
	  7) Article Views
	    date	    viewer_id	article_id	author_id
		2017-08-01	123			456			789
		2017-08-02	432			543			654
		2017-08-01	789			456			789
		2017-08-03	567			780			432
		2017-08-01	789			457			789
		
		CREATE TABLE article_views (
			date            timestamp,
			viewer_id       int,
			article_id      int,
			author_id       int
		);
		
		INSERT INTO article_views VALUES ('2017-08-01',123,	456	,789);
		INSERT INTO article_views VALUES ('2017-08-02',432	,543,	654);
		INSERT INTO article_views VALUES ('2017-08-01',789,	456	,789);
		INSERT INTO article_views VALUES ('2017-08-03',567,	780,	432);
		INSERT INTO article_views VALUES ('2017-08-01',789, 457    ,789);
		
		select vw.viewer_id,au.author_id 
			from article_views vw left 
			outer join article_views au 
				on vw.viewer_id=vw.author_id 
			where au.author_id isnull;
			+-----------+-----------+
			| viewer_id | author_id |
			+-----------+-----------+
			|       123 |      NULL |
			|       432 |      NULL |
			|       567 |      NULL |
			+-----------+-----------+
 