	SQL Schema
	
	DDL SCRIPTS
	create table candidate(id int,name varchar(100));
	insert into candidate values (1,'A');
	insert into candidate values (2,'B');
	insert into candidate values (3,'C');
	insert into candidate values (4,'D');
	insert into candidate values (5,'E');
	
	create table vote(id int,candidate_id int);
	insert into vote values(1,2);
	insert into vote values(2,4);
	insert into vote values(3,3);
	insert into vote values(4,2);
	insert into vote values(5,5);
		
	CANDIDATE
		+-----+---------+
		| id  | Name    |
		+-----+---------+
		| 1   | A       |
		| 2   | B       |
		| 3   | C       |
		| 4   | D       |
		| 5   | E       |
		+-----+---------+  
	VOTE
		+-----+--------------+
		| id  | candidate_id |
		+-----+--------------+
		| 1   |     2        |
		| 2   |     4        |
		| 3   |     3        |
		| 4   |     2        |
		| 5   |     5        |
		+-----+--------------+
	
	id is the auto-increment primary key,
	candidate_id is the id appeared in Candidate table.
	
	
	#WRITE A SQL TO FIND THE NAME OF THE WINNING CANDIDATE, THE ABOVE EXAMPLE WILL RETURN THE WINNER B.

	+------+
	| Name |
	+------+
	| B    |
	+------+
    1 a)USING CTE
	   with cte
		as
		(select c.name
			,count(v.candidate_id) as cnt
			 from candidate c
			 left outer join vote v
			 on c.id=v.candidate_id
			 group by 
			 c.name
		)
         
		select name from cte where cnt=(select max(cnt) from cte)
		+------+
		| name |
		+------+
		| B    |
		+------+
	
	1b )USING COUNT ORDER BY AND LIMIT
		select count(v.candidate_id) as cnt
           ,c.name
           from candidate c
             join vote v
             on c.id=v.candidate_id
             group by c.name
             order by cnt desc limit 1;
			+-----+------+
			| cnt | name |
			+-----+------+
			|   2 | B    |
			+-----+------+	
	
	1c) USING AGGREGATE FUNCTIONS
		  select 
			a.name
			from
			  (select c.name
				  , row_number() over (partition by candidate_id ) rnk
				  from candidate c
				  left join vote v
				  on c.id = v.candidate_id
				)a
			order by rnk desc
			limit 1;
    
	1d)USING COUNT AND OVER CLAUSE
	   note: If over clause is empty it treats the entire set of query rows as single partition.
	         This would produce a global sum, but does so for each row
			 If over is specified with partition rows it would treat it would partition by that column
		select a.id
			from
			(select c.id
			   , count(v.candidate_id) cnt
			   , max(count(v.candidate_id)) over() max_cnt
			   from candidate c
			   left join vote v
			   on c.id=v.candidate_id
			   group by c.id) a
			where a.cnt=a.max_cnt;
						   
	2) # GET THE WINNING CANDIDATE VOTES AND TOTAL VOTES	                                  

	select  a.id
		, a.max_cnt votes
		, a.total_cnt  total_votes
		from
		   ( select c.id
				 , count(v.candidate_id) cnt
				 , max(count(v.candidate_id)) over() max_cnt
				 , sum(count(v.candidate_id)) over() total_cnt
				 from candidate c
				 left join vote v
				 on c.id =v.candidate_id
				 group by c.id
		   )a
		   where a.cnt=a.max_cnt;
	  # USING CTE TABLE
           WITH  cte 
  		AS
  		(
	    		SELECT  count(v.id) as count_votes
        			, max(count(v.id)) over() max_cnt
			        , sum(count(v.id)) over() total_cnt
			        , c.name as candidate_name
			 FROM vote as v 
			 JOIN candidate as c 
		         ON c.id=v.candidate_id
		         group by c.name
	        ) 
		SELECT * from cte where count_votes=max_cnt;
